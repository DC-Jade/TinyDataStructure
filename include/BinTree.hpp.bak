#ifndef INCLUDE_BINTREE_H
#define INCLUDE_BINTREE_H

#include "../include/BinNode.hpp"
#include <stack>
#include <queue>
#include <iostream>
//#include <stdio.h>

namespace mydatastructure {

#define FromParentTo(x) \
( IsRoot(x) ? _root : ( IsLChild(x) ? (x)._parent->_lc : (x)._parent->_rc ) )

template <typename T>
class VST {
public:
  virtual void operator()(T data) {
    std::cout << data << "\t";
  }
}; // class VST, function object

/*
template <typename T>
class Print : public VST<T> {
public:
  void operator() (T data) {
    std::cout << data;
  }
};  // class Print, function class
*/

template <typename T>
class BinTree {
protected:
  int _size;
  BinNodePosi(T) _root;
  virtual int UpdateHeight(BinNodePosi(T) x); // update x's height
  void UpdateHeightAbove(BinNodePosi(T) x);  // update x and ancestors' height
public:
  BinTree() : _size(0), _root(nullptr) {
    std::cout << "BinTree default constructor" << std::endl;
  }
  ~BinTree() {
    if (0 < _size) Remove(_root);
    std::cout << "BinTree deconstructor" << std::endl;
  }
  int  Size() { return _size; }
  bool Empty() { return _size <= 0; };
  BinNodePosi(T) Root() const { return _root; }
  BinNodePosi(T) InsertAsRoot(const T &e);
  BinNodePosi(T) Insert(BinNodePosi(T) x, const T &e);  // Insert as right child
  BinNodePosi(T) Insert(const T &e, BinNodePosi(T) x);  // Insert as left child
  BinNodePosi(T) Attach(BinTree<T>* &subtree, BinNodePosi(T) x);  // attach as
                                                                  // left tree
  BinNodePosi(T) Attach(BinNodePosi(T) x, BinTree<T>* &subtree);  // attach as
                                                                  // right tree
  int Remove(BinNodePosi(T) x);
  BinTree<T> *Secede(BinNodePosi(T) x);
}; // class BinTree

template <typename T>
void Release(BinNodePosi(T) x) {
  delete x;
}


// BinNode status judgement
//namespace binnodestatus {

template <typename T>
inline bool IsRoot(const BinNode<T> bin_node) {
  return !(bin_node._parent);
}

template <typename T>
inline bool IsLChild(const BinNode<T> bin_node) {
  return (!IsRoot(bin_node) && (&bin_node ==  bin_node._parent->_lc));
}

template <typename T>
inline bool IsRChild(const BinNode<T> bin_node) {
  return (!IsRoot(bin_node) && (&bin_node == bin_node._parent->_rc));
}

template <typename T>
inline bool HasParent(const BinNode<T> bin_node) {
  return !IsRoot(bin_node);
}

template <typename T>
inline bool HasLChild(const BinNode<T> bin_node) {
  return (bin_node._lc);
}

template <typename T>
inline bool HasRChild(const BinNode<T> bin_node) {
  return (bin_node._rc);
}

template <typename T>
inline bool HasChild(const BinNode<T> bin_node) {
  return (HasLChild(bin_node) || HasRChild(bin_node));
}

template <typename T>
inline bool HasBothChild(const BinNode<T> bin_node) {
  return (HasLChild(bin_node) && HasRChild(bin_node));
}

template <typename T>
inline bool IsLeaf(const BinNode<T> bin_node) {
  return !HasChild(bin_node);
}

template <typename T>
inline BinNodePosi(T) Sibling(const BinNodePosi(T) ptr) {
  IsLChild(*ptr) ? ptr->_parent->_rc : ptr->_parent->_lc;
}

template <typename T>
inline BinNodePosi(T) Uncle(const BinNodePosi(T) ptr) {
  return (Sibling(ptr->_parent));
}

//}  // namespace mydatastructure::binnodestatus

/* TODO: replace macro with inline function
template <typename T>
inline BinNodePosi(T) FromParentTo(BinNode<T> bin_node) {
  BinNodePosi(T) tmp = &bin_node;
  if (IsRoot(bin_node))
    return tmp;
  else if (IsLChild(bin_node))
    return bin_node._parent->_lc;
  else
    return bin_node._parent->_rc;
}
*/

template <typename T>
inline int Stature(const BinNode<T> bin_node) {
  return (bin_node._height) ? bin_node._height : -1;
}

inline int Max(int le, int re) {
  return (le > re) ? le : re;
}

template <typename T>
BinNodePosi(T) BinTree<T>::InsertAsRoot(const T &e) {
  ++_size;
  return _root = new BinNode<T> (e);
}

template <typename T>
BinNodePosi(T) BinTree<T>::Insert(BinNodePosi(T) x, const T &e) {
  ++_size;
  x->InsertAsRc(e);
  UpdateHeightAbove(x);
  return x->_rc;
}

template <typename T>
BinNodePosi(T) BinTree<T>::Insert(const T &e, BinNodePosi(T) x) {
  ++_size;
  x->InsertAsLc(e);
  UpdateHeightAbove(x);
  return x->_lc;
}

template <typename T>
BinNodePosi(T) BinTree<T>::Attach(BinNodePosi(T) x, BinTree<T> *&subtree) {
  if ((x->_rc = subtree->_root))
    x->_rc->_parent = x;
  _size += subtree->_size;
  UpdateHeightAbove(x);
  subtree->_root = nullptr;
  subtree->_size = 0;
  Release(subtree);
  subtree = nullptr;
  return x;
}

template <typename T>
int BinTree<T>::UpdateHeight(BinNodePosi(T) x) {
  return x->_height = 1 + Max(Stature(*(x->_lc)), Stature(*(x->_rc)));
} 

template <typename T>
void BinTree<T>::UpdateHeightAbove(BinNodePosi(T) x) {
  for (BinNodePosi(T) ptr = x; ptr != nullptr; ptr = ptr->_parent) continue;
} 

template <typename T>
int BinTree<T>::Remove(BinNodePosi(T) x) {
  FromParentTo(*x) = nullptr;
  UpdateHeightAbove(x->_parent);
  int n = RemoveAt(x);
  _size -= n;
  return n;
}

template <typename T>
static int RemoveAt(BinNodePosi(T) x) {
  if (!x)
    return 0;
  int n = 1 + RemoveAt(x->_lc) + RemoveAt(x->_rc);
  Release(x);
  return n;
}

template <typename T>
BinTree<T>* BinTree<T>::Secede(BinNodePosi(T) x) {
  FromParentTo(*x) = nullptr;
  UpdateHeightAbove(x->_parent);
  BinTree<T> *subtree = new BinTree<T>;
  subtree->_root = x;
  x->_parent = nullptr;

  _size -= subtree->_size;
  return subtree;
}

/* Traverse based on recursive*/

template <typename T, typename VST>
void TraversePreRecursive(BinNodePosi(T) ptr, VST &visit) {
  if (!ptr) return;
  visit(ptr->data);
  TraversePreRecursive(ptr->_lc, visit);
  TraversePreRecursive(ptr->_rc, visit);
}

template <typename T, typename VST>
void TraversePostRecursive(BinNodePosi(T) ptr, VST &visit) {
  if (!ptr) return;
  TraversePostRecursive(ptr->_lc, visit);
  TraversePostRecursive(ptr->_rc, visit);
  visit(ptr->_data);
}

template <typename T, typename VST>
void TraverseInRecursive(BinNodePosi(T) ptr, VST &visit) {
  if (!ptr) return;
  TraverseInRecursive(ptr->_lc, visit);
  visit(ptr->_data);
  TraverseInRecursive(ptr->_rc, visit);
}

/* Traverse based on iteration */
template <typename T, typename VST>
void VisitAlongLeftBranch(BinNodePosi(T) ptr, VST &visit,
  std::stack<BinNodePosi(T)> &stack) {
  while (ptr) {
    visit(ptr->_data);
    stack.push(ptr->_rc);
    ptr = ptr->_lc;
  }
}

template <typename T, typename VST>
void TraversePreIteration(BinNodePosi(T) ptr, VST &visit) {
  std::stack<BinNodePosi(T)> stack;
  while (true) {
    VisitAlongLeftBranch(ptr, visit, stack);
    if (stack.empty())
      break;
    ptr = stack.top();
    stack.pop();
  }
}

template <typename T>
void GoAlongLeftBranch(BinNodePosi(T) ptr, std::stack<BinNodePosi(T)> &stack) {
  while (ptr) {
    stack.push(ptr);
    ptr = ptr->_lc;
  }
}

template <typename T, typename VST>
void TraverseInIteration(BinNodePosi(T) ptr, VST &visit) {
  std::stack<BinNodePosi(T)> stack;
  while (true) {
    GoAlongLeftBranch(ptr, stack);
    if (stack.empty()) break;
    ptr = stack.top();
    visit(ptr->_data);
    stack.pop();
    ptr = ptr->_rc;
  }
}

template <typename T>
void GoToHLVFL(std::stack<BinNodePosi(T)> &stack) {
  while (BinNodePosi(T) ptr = stack.top()) {
    if (HasLChild(*ptr)) {
      if(HasRChild(*ptr))
        stack.push(ptr->_rc);
      stack.push(ptr->_lc);
    } else {
      stack.push(ptr->_rc);
    }
  }
  stack.pop();
}

template <typename T, typename VST>
void TraversePostIteration(BinNodePosi(T) ptr, VST &visit) {
  std::stack<BinNodePosi(T)> stack;
  if (ptr)
    stack.push(ptr);
  while (!stack.empty()) {
    if (stack.top() != ptr->_parent)
      GoToHLVFL(stack);
    ptr = stack.top();
    stack.pop();
    visit(ptr->_data);
  }
}

template <typename T> template <typename VST>
void BinNode<T>::TraverseLevel(VST &visit) {
  std::queue<BinNodePosi(T)> queue;
  queue.push(this);
  while (!queue.empty()) {
    BinNodePosi(T) ptr = queue.front();
    queue.pop();
    visit(ptr->_data);
    if (HasLChild(*ptr))
      queue.push(ptr->_lc);
    if (HasRChild(*ptr))
      queue.push(ptr->_rc);
  }
}


} // namespace mydatastructure

#endif